// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protobuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_Protobuf_2eproto();
namespace proto {
namespace monitoring {
class SnmpObject;
class SnmpObjectDefaultTypeInternal;
extern SnmpObjectDefaultTypeInternal _SnmpObject_default_instance_;
class SnmpPackage;
class SnmpPackageDefaultTypeInternal;
extern SnmpPackageDefaultTypeInternal _SnmpPackage_default_instance_;
}  // namespace monitoring
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::monitoring::SnmpObject* Arena::CreateMaybeMessage<::proto::monitoring::SnmpObject>(Arena*);
template<> ::proto::monitoring::SnmpPackage* Arena::CreateMaybeMessage<::proto::monitoring::SnmpPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace monitoring {

// ===================================================================

class SnmpObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.monitoring.SnmpObject) */ {
 public:
  SnmpObject();
  virtual ~SnmpObject();

  SnmpObject(const SnmpObject& from);
  SnmpObject(SnmpObject&& from) noexcept
    : SnmpObject() {
    *this = ::std::move(from);
  }

  inline SnmpObject& operator=(const SnmpObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnmpObject& operator=(SnmpObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SnmpObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnmpObject* internal_default_instance() {
    return reinterpret_cast<const SnmpObject*>(
               &_SnmpObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SnmpObject* other);
  friend void swap(SnmpObject& a, SnmpObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnmpObject* New() const final {
    return CreateMaybeMessage<SnmpObject>(nullptr);
  }

  SnmpObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnmpObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnmpObject& from);
  void MergeFrom(const SnmpObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnmpObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.monitoring.SnmpObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string oid = 1;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 1;
  const std::string& oid() const;
  void set_oid(const std::string& value);
  void set_oid(std::string&& value);
  void set_oid(const char* value);
  void set_oid(const char* value, size_t size);
  std::string* mutable_oid();
  std::string* release_oid();
  void set_allocated_oid(std::string* oid);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // required string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional sint32 walk = 5;
  bool has_walk() const;
  void clear_walk();
  static const int kWalkFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 walk() const;
  void set_walk(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:proto.monitoring.SnmpObject)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 walk_;
  friend struct ::TableStruct_Protobuf_2eproto;
};
// -------------------------------------------------------------------

class SnmpPackage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.monitoring.SnmpPackage) */ {
 public:
  SnmpPackage();
  virtual ~SnmpPackage();

  SnmpPackage(const SnmpPackage& from);
  SnmpPackage(SnmpPackage&& from) noexcept
    : SnmpPackage() {
    *this = ::std::move(from);
  }

  inline SnmpPackage& operator=(const SnmpPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnmpPackage& operator=(SnmpPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SnmpPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnmpPackage* internal_default_instance() {
    return reinterpret_cast<const SnmpPackage*>(
               &_SnmpPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SnmpPackage* other);
  friend void swap(SnmpPackage& a, SnmpPackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnmpPackage* New() const final {
    return CreateMaybeMessage<SnmpPackage>(nullptr);
  }

  SnmpPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnmpPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnmpPackage& from);
  void MergeFrom(const SnmpPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnmpPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.monitoring.SnmpPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.monitoring.SnmpObject obj = 1;
  int obj_size() const;
  void clear_obj();
  static const int kObjFieldNumber = 1;
  ::proto::monitoring::SnmpObject* mutable_obj(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::monitoring::SnmpObject >*
      mutable_obj();
  const ::proto::monitoring::SnmpObject& obj(int index) const;
  ::proto::monitoring::SnmpObject* add_obj();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::monitoring::SnmpObject >&
      obj() const;

  // @@protoc_insertion_point(class_scope:proto.monitoring.SnmpPackage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::monitoring::SnmpObject > obj_;
  friend struct ::TableStruct_Protobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnmpObject

// required string oid = 1;
inline bool SnmpObject::has_oid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnmpObject::clear_oid() {
  oid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SnmpObject::oid() const {
  // @@protoc_insertion_point(field_get:proto.monitoring.SnmpObject.oid)
  return oid_.GetNoArena();
}
inline void SnmpObject::set_oid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  oid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.monitoring.SnmpObject.oid)
}
inline void SnmpObject::set_oid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  oid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.monitoring.SnmpObject.oid)
}
inline void SnmpObject::set_oid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  oid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.monitoring.SnmpObject.oid)
}
inline void SnmpObject::set_oid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  oid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.monitoring.SnmpObject.oid)
}
inline std::string* SnmpObject::mutable_oid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.monitoring.SnmpObject.oid)
  return oid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnmpObject::release_oid() {
  // @@protoc_insertion_point(field_release:proto.monitoring.SnmpObject.oid)
  if (!has_oid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return oid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnmpObject::set_allocated_oid(std::string* oid) {
  if (oid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oid);
  // @@protoc_insertion_point(field_set_allocated:proto.monitoring.SnmpObject.oid)
}

// required string value = 2;
inline bool SnmpObject::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnmpObject::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SnmpObject::value() const {
  // @@protoc_insertion_point(field_get:proto.monitoring.SnmpObject.value)
  return value_.GetNoArena();
}
inline void SnmpObject::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.monitoring.SnmpObject.value)
}
inline void SnmpObject::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.monitoring.SnmpObject.value)
}
inline void SnmpObject::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.monitoring.SnmpObject.value)
}
inline void SnmpObject::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.monitoring.SnmpObject.value)
}
inline std::string* SnmpObject::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.monitoring.SnmpObject.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnmpObject::release_value() {
  // @@protoc_insertion_point(field_release:proto.monitoring.SnmpObject.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnmpObject::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.monitoring.SnmpObject.value)
}

// required string name = 3;
inline bool SnmpObject::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnmpObject::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SnmpObject::name() const {
  // @@protoc_insertion_point(field_get:proto.monitoring.SnmpObject.name)
  return name_.GetNoArena();
}
inline void SnmpObject::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.monitoring.SnmpObject.name)
}
inline void SnmpObject::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.monitoring.SnmpObject.name)
}
inline void SnmpObject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.monitoring.SnmpObject.name)
}
inline void SnmpObject::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.monitoring.SnmpObject.name)
}
inline std::string* SnmpObject::mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.monitoring.SnmpObject.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnmpObject::release_name() {
  // @@protoc_insertion_point(field_release:proto.monitoring.SnmpObject.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnmpObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.monitoring.SnmpObject.name)
}

// optional string description = 4;
inline bool SnmpObject::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnmpObject::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SnmpObject::description() const {
  // @@protoc_insertion_point(field_get:proto.monitoring.SnmpObject.description)
  return description_.GetNoArena();
}
inline void SnmpObject::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.monitoring.SnmpObject.description)
}
inline void SnmpObject::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.monitoring.SnmpObject.description)
}
inline void SnmpObject::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.monitoring.SnmpObject.description)
}
inline void SnmpObject::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.monitoring.SnmpObject.description)
}
inline std::string* SnmpObject::mutable_description() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.monitoring.SnmpObject.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnmpObject::release_description() {
  // @@protoc_insertion_point(field_release:proto.monitoring.SnmpObject.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnmpObject::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.monitoring.SnmpObject.description)
}

// optional sint32 walk = 5;
inline bool SnmpObject::has_walk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SnmpObject::clear_walk() {
  walk_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SnmpObject::walk() const {
  // @@protoc_insertion_point(field_get:proto.monitoring.SnmpObject.walk)
  return walk_;
}
inline void SnmpObject::set_walk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  walk_ = value;
  // @@protoc_insertion_point(field_set:proto.monitoring.SnmpObject.walk)
}

// -------------------------------------------------------------------

// SnmpPackage

// repeated .proto.monitoring.SnmpObject obj = 1;
inline int SnmpPackage::obj_size() const {
  return obj_.size();
}
inline void SnmpPackage::clear_obj() {
  obj_.Clear();
}
inline ::proto::monitoring::SnmpObject* SnmpPackage::mutable_obj(int index) {
  // @@protoc_insertion_point(field_mutable:proto.monitoring.SnmpPackage.obj)
  return obj_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::monitoring::SnmpObject >*
SnmpPackage::mutable_obj() {
  // @@protoc_insertion_point(field_mutable_list:proto.monitoring.SnmpPackage.obj)
  return &obj_;
}
inline const ::proto::monitoring::SnmpObject& SnmpPackage::obj(int index) const {
  // @@protoc_insertion_point(field_get:proto.monitoring.SnmpPackage.obj)
  return obj_.Get(index);
}
inline ::proto::monitoring::SnmpObject* SnmpPackage::add_obj() {
  // @@protoc_insertion_point(field_add:proto.monitoring.SnmpPackage.obj)
  return obj_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::monitoring::SnmpObject >&
SnmpPackage::obj() const {
  // @@protoc_insertion_point(field_list:proto.monitoring.SnmpPackage.obj)
  return obj_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace monitoring
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protobuf_2eproto
